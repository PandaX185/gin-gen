package packageName

import (
    "gorm.io/gorm"
)

type repositoryRepository interface {
    CreateModel(repository *Model) (*Model, error)
    GetModel(id int) (*Model, error)
    GetModels() ([]*Model, error)
    UpdateModel(repository *Model) (*Model, error)
    DeleteModel(id int) error
}

type ModelRepository struct {
    Db *gorm.DB
}

func NewModel(db *gorm.DB) *ModelRepository {
    return &ModelRepository{Db: db}
}

func (r *ModelRepository) CreateModel(repository *Model) (*Model, error) {
    err := r.Db.Create(repository).Error
    if err != nil {
        return nil, err
    }
    return repository, nil
}

func (r *ModelRepository) GetModel(id int) (*Model, error) {
    repository := &Model{}
    err := r.Db.First(repository, id).Error
    if err != nil {
        return nil, err
    }
    return repository, nil
}

func (r *ModelRepository) GetModels() ([]*Model, error) {
    repositorys := []*Model{}
    err := r.Db.Find(&repositorys).Error
    if err != nil {
        return nil, err
    }
    return repositorys, nil
}

func (r *ModelRepository) UpdateModel(repository *Model) (*Model, error) {
    err := r.Db.Save(repository).Error
    if err != nil {
        return nil, err
    }
    return repository, nil
}

func (r *ModelRepository) DeleteModel(id int) error {
    err := r.Db.Delete(&Model{}, id).Error
    if err != nil {
        return err
    }
    return nil
}