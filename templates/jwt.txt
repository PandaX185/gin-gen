package auth

import (
 "github.com/golang-jwt/jwt"
 "os"
)

type AuthClaims struct {
 jwt.StandardClaims
}

func NewAccessToken(claims AuthClaims) (string, error) {
 accessToken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

 return accessToken.SignedString([]byte(os.Getenv("SECRET_KEY")))
}

func NewRefreshToken(claims jwt.StandardClaims) (string, error) {
 refreshToken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

 return refreshToken.SignedString([]byte(os.Getenv("SECRET_KEY")))
}

func ParseAccessToken(accessToken string) *AuthClaims {
 parsedAccessToken, _ := jwt.ParseWithClaims(accessToken, &AuthClaims{}, func(token *jwt.Token) (interface{}, error) {
  return []byte(os.Getenv("SECRET_KEY")), nil
 })

 return parsedAccessToken.Claims.(*AuthClaims)
}

func ParseRefreshToken(refreshToken string) *jwt.StandardClaims {
 parsedRefreshToken, _ := jwt.ParseWithClaims(refreshToken, &jwt.StandardClaims{}, func(token *jwt.Token) (interface{}, error) {
  return []byte(os.Getenv("SECRET_KEY")), nil
 })

 return parsedRefreshToken.Claims.(*jwt.StandardClaims)
}